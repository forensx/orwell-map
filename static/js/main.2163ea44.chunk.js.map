{"version":3,"sources":["Components/Map.js","App.js","serviceWorker.js","index.js"],"names":["themes","text_color","location_color","location_size","location_opacity","poly_outline","poly_linewidth","poly_opacity","initialViewState","longitude","latitude","zoom","pitch","bearing","Map","props","context","state","this","hoveredObject","path","pointerX","pointerY","hoverType","message","push","LOCATION_NAME","name","className","style","position","zIndex","pointerEvents","left","top","color","layers","PolygonLayer","id","data","factions","pickable","stroked","filled","opacity","extruded","wireframe","lineWidthMinPixels","getPolygon","d","contours","getLineColor","getFillColor","getLineWidth","onHover","info","setState","object","x","y","ScatterplotLayer","locations","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","coordinates","controller","mapboxApiAccessToken","mapStyle","_renderTooltip","width","height","alignContent","display","flexDirection","fontFamily","fontSize","React","Component","App","basename","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"woEAaIA,EAAS,CACTC,WAAY,UAGZC,eAAgB,CAAC,IAAK,GAAI,GAC1BC,cAAe,GACfC,iBAAkB,GAGlBC,aAAc,CAAC,EAAG,EAAG,GACrBC,eAAgB,GAChBC,aAAc,KAQZC,EAAmB,CACrBC,WAAY,MACZC,SAAU,QACVC,KAAM,GACNC,MAAO,EACPC,QAAS,GA+FEC,E,YA3FX,WAAYC,EAAOC,GAAU,IAAD,8BACxB,4CAAMD,EAAOC,KAERC,MAAQ,GAHW,E,8EAOV,IAAD,EACkDC,KAAKD,OAAS,GAA/DE,GADD,EACLC,KADK,EACCD,eAAeE,EADhB,EACgBA,SAAUC,EAD1B,EAC0BA,SAAUC,EADpC,EACoCA,UAC7CC,EAAU,GACd,IACsB,UAAdD,EACAC,EAAQC,KAAKN,EAAcO,eAER,YAAdH,GACLC,EAAQC,KAAKN,EAAcQ,MAGnC,UAQA,OALeR,GACX,yBAAKS,UAAU,UAAUC,MAAO,CAAEC,SAAU,WAAYC,OAAQ,EAAGC,cAAe,OAAQC,KAAMZ,EAAS,GAAIa,IAAKZ,EAAUa,MAAOnC,EAAOC,aACrIuB,K,+BAKH,IAAD,OACCY,EAAS,CAEX,IAAIC,IAAa,CACbC,GAAI,WACJC,KAAMC,EACNC,UAAU,EACVC,SAAS,EACTC,QAAQ,EACRC,QAAS5C,EAAOO,aAChBsC,UAAU,EACVC,WAAW,EACXC,mBAAoB,EACpBC,WAAY,SAAAC,GAAC,OAAIA,EAAEC,UACnBC,aAAcnD,EAAOK,aACrB+C,aAAc,SAAAH,GAAC,OAAIA,EAAEd,OACrBkB,aAAcrD,EAAOM,eACrBgD,QAAS,SAAAC,GAAI,OAAI,EAAKC,SAAS,CAC3BrC,cAAeoC,EAAKE,OACpBpC,SAAUkC,EAAKG,EACfpC,SAAUiC,EAAKI,EACfpC,UAAW,eAGnB,IAAIqC,IAAiB,CACjBtB,GAAI,YACJC,KAAMsB,EACNpB,UAAU,EACVG,QAAS5C,EAAOG,cAChB2D,YAAa9D,EAAOG,cACpB4D,gBAAiB,EACjBC,gBAAiB,GACjBC,YAAa,SAAAhB,GAAC,OAAIA,EAAEiB,aACpBd,aAAc,SAAAH,GAAC,OAAIjD,EAAOE,gBAC1BoD,QAAS,SAAAC,GAAI,OAAI,EAAKC,SAAS,CAC3BrC,cAAeoC,EAAKE,OACpBpC,SAAUkC,EAAKG,EACfpC,SAAUiC,EAAKI,EACfpC,UAAW,cAIvB,OACI,yBAAKK,UAAU,OAEX,kBAAC,IAAD,CACIpB,iBAAkBA,EAClB2D,YAAY,EACZ/B,OAAQA,GAER,kBAAC,IAAD,CAAWgC,qBA1FH,uGA2FJC,SAAS,oCACZnD,KAAKoD,kBAEV,yBAAK1C,UAAU,eAAeC,MAAO,CAAE0C,MAAO,IAAKC,OAAQ,IAAKC,aAAc,OAAQC,QAAS,OAAQC,cAAe,SAAUC,WAAY,QAASC,SAAU,KAA/J,iD,GAnFEC,IAAMC,WCtBTC,E,iLAVX,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKrD,UAAY,OACf,kBAAC,IAAD,CAAOsD,OAAK,EAAC9D,KAAK,IAAI+D,UAAWrE,U,GANzBiE,aCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5E,c","file":"static/js/main.2163ea44.chunk.js","sourcesContent":["import React from 'react';\r\nimport DeckGL from '@deck.gl/react';\r\nimport { ScatterplotLayer, TextLayer, PolygonLayer } from '@deck.gl/layers';\r\nimport { StaticMap } from 'react-map-gl';\r\nimport \"./Map.css\";\r\n\r\n\r\n// import data \r\nimport locations from \"../datafiles/location_points.json\";\r\nimport factions from \"../datafiles/county_polygons.json\";\r\n\r\n\r\n// dictonary for customization such as colors\r\nvar themes = {\r\n    text_color: \"#FFFFFF\",\r\n\r\n    // location themes\r\n    location_color: [189, 47, 0],\r\n    location_size: 10, \r\n    location_opacity: 0.4,\r\n\r\n    // polygon themes\r\n    poly_outline: [0, 0, 0],\r\n    poly_linewidth: 50,\r\n    poly_opacity: .05,\r\n};\r\n\r\n\r\n// set mapbox token\r\nconst MAPBOX_ACCESS_TOKEN = \"pk.eyJ1IjoibWV0YWxtdWxpc2hhMjA1IiwiYSI6ImNqa3p6MnMxZzB6aXMzd3FqNzIydGQ1eWQifQ.Q7-btpPLCXJol5KEae2fjA\";\r\n\r\n// Initial viewport settings\r\nconst initialViewState = {\r\n    longitude: -0.1278,\r\n    latitude: 51.5074,\r\n    zoom: 12,\r\n    pitch: 0,\r\n    bearing: 0\r\n};\r\n\r\nclass Map extends React.Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n        };\r\n    };\r\n\r\n    _renderTooltip() {\r\n        const { path, hoveredObject, pointerX, pointerY, hoverType } = this.state || {};\r\n        var message = []\r\n        try{\r\n            if (hoverType === \"point\"){\r\n                message.push(hoveredObject.LOCATION_NAME);\r\n            }\r\n            else if (hoverType === \"polygon\"){\r\n                message.push(hoveredObject.name);\r\n            }\r\n        }\r\n        catch{\r\n\r\n        }\r\n        var toReturn = hoveredObject && (\r\n            <div className=\"tooltip\" style={{ position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX+10, top: pointerY, color: themes.text_color }}>\r\n                {message}\r\n            </div>\r\n        )\r\n        return toReturn;\r\n    }\r\n    render() {\r\n        const layers = [\r\n            // add map layers here\r\n            new PolygonLayer({\r\n                id: 'factions',\r\n                data: factions,\r\n                pickable: true,\r\n                stroked: true,\r\n                filled: true,\r\n                opacity: themes.poly_opacity,\r\n                extruded: false,\r\n                wireframe: true,\r\n                lineWidthMinPixels: 1,\r\n                getPolygon: d => d.contours,\r\n                getLineColor: themes.poly_outline,\r\n                getFillColor: d => d.color,\r\n                getLineWidth: themes.poly_linewidth,\r\n                onHover: info => this.setState({\r\n                    hoveredObject: info.object,\r\n                    pointerX: info.x,\r\n                    pointerY: info.y,\r\n                    hoverType: \"polygon\",\r\n                })\r\n            }),\r\n            new ScatterplotLayer({\r\n                id: 'locations',\r\n                data: locations,\r\n                pickable: true,\r\n                opacity: themes.location_size,\r\n                radiusScale: themes.location_size,\r\n                radiusMinPixels: 5,\r\n                radiusMaxPixels: 15,\r\n                getPosition: d => d.coordinates,\r\n                getFillColor: d => themes.location_color,\r\n                onHover: info => this.setState({\r\n                    hoveredObject: info.object,\r\n                    pointerX: info.x,\r\n                    pointerY: info.y,\r\n                    hoverType: \"point\",\r\n                })\r\n            })\r\n        ];\r\n        return (\r\n            <div className=\"Map\">\r\n                {/* Mr. Clayton, your comment is over there. */}\r\n                <DeckGL\r\n                    initialViewState={initialViewState}\r\n                    controller={true}\r\n                    layers={layers}\r\n                >\r\n                    <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                        mapStyle=\"mapbox://styles/mapbox/dark-v10\" />\r\n                    {this._renderTooltip()}\r\n                </DeckGL>\r\n                <div className=\"controlPanel\" style={{ width: 200, height: 150, alignContent: \"left\", display: \"flex\", flexDirection: 'column', fontFamily: 'serif', fontSize: 13 }}>\r\n                    Orwell's 1984\r\n                    Map of the fictional story\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map","import React, {Component} from 'react';\r\nimport { BrowserRouter, HashRouter, Route } from 'react-router-dom';\r\nimport Map from './Components/Map';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter basename=\"/\">\r\n        <div className = \"App\">  \r\n          <Route exact path=\"/\" component={Map} />\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}