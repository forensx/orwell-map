{"version":3,"sources":["Components/Map.js","App.js","serviceWorker.js","index.js"],"names":["themes","text_color","location_color","location_size","location_opacity","poly_outline","poly_linewidth","poly_opacity","initialViewState","longitude","latitude","zoom","pitch","bearing","Map","props","context","state","this","hoveredObject","path","pointerX","pointerY","hoverType","message","push","coordinates","name","className","style","position","zIndex","pointerEvents","left","top","color","layers","PolygonLayer","id","data","factions","pickable","stroked","filled","opacity","extruded","wireframe","lineWidthMinPixels","getPolygon","d","contours","getLineColor","getFillColor","getLineWidth","onHover","info","setState","object","x","y","ScatterplotLayer","locations","radiusScale","TextLayer","getPosition","getText","LOCATION_NAME","getTextAnchor","getAlignmentBaseline","getSize","getColor","controller","mapboxApiAccessToken","mapStyle","_renderTooltip","width","height","alignContent","display","flexDirection","fontFamily","fontSize","marginLeft","marginTop","React","Component","App","basename","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.67f6e443.chunk.js","sourcesContent":["import React from \"react\";\r\nimport DeckGL from \"@deck.gl/react\";\r\nimport { ScatterplotLayer, TextLayer, PolygonLayer } from \"@deck.gl/layers\";\r\nimport { StaticMap } from \"react-map-gl\";\r\nimport \"./Map.css\";\r\n\r\n// import data\r\nimport locations from \"../datafiles/location_points.json\";\r\nimport factions from \"../datafiles/county_polygons.json\";\r\n\r\n// dictonary for customization such as colors\r\nvar themes = {\r\n  text_color: \"#FFFFFF\",\r\n\r\n  // location themes\r\n  location_color: [255, 0, 255],\r\n  location_size: 20,\r\n  location_opacity: 0.2,\r\n\r\n  // polygon themes\r\n  poly_outline: [0, 0, 0],\r\n  poly_linewidth: 50,\r\n  poly_opacity: 0.05\r\n};\r\n\r\n// set mapbox token\r\nconst MAPBOX_ACCESS_TOKEN =\r\n  \"pk.eyJ1IjoibWV0YWxtdWxpc2hhMjA1IiwiYSI6ImNqa3p6MnMxZzB6aXMzd3FqNzIydGQ1eWQifQ.Q7-btpPLCXJol5KEae2fjA\";\r\n\r\n// Initial viewport settings\r\nconst initialViewState = {\r\n  longitude: -0.1278,\r\n  latitude: 51.5074,\r\n  zoom: 12,\r\n  pitch: 0,\r\n  bearing: 0\r\n};\r\n\r\nclass Map extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  _renderTooltip() {\r\n    const { path, hoveredObject, pointerX, pointerY, hoverType } =\r\n      this.state || {};\r\n    var message = [];\r\n    try {\r\n      if (hoverType === \"point\") {\r\n        message.push(hoveredObject.coordinates[1], \"°\", \", \", hoveredObject.coordinates[0], \"°\");\r\n      } else if (hoverType === \"polygon\") {\r\n        message.push(hoveredObject.name);\r\n      }\r\n    } catch {}\r\n    var toReturn = hoveredObject && (\r\n      <div\r\n        className=\"tooltip\"\r\n        style={{\r\n          position: \"absolute\",\r\n          zIndex: 1,\r\n          pointerEvents: \"none\",\r\n          left: pointerX + 10,\r\n          top: pointerY,\r\n          color: themes.text_color\r\n        }}\r\n      >\r\n        {message}\r\n      </div>\r\n    );\r\n    return toReturn;\r\n  }\r\n  render() {\r\n    const layers = [\r\n      // add map layers here\r\n      new PolygonLayer({\r\n        id: \"factions\",\r\n        data: factions,\r\n        pickable: true,\r\n        stroked: true,\r\n        filled: true,\r\n        opacity: themes.poly_opacity,\r\n        extruded: false,\r\n        wireframe: true,\r\n        lineWidthMinPixels: 1,\r\n        getPolygon: d => d.contours,\r\n        getLineColor: themes.poly_outline,\r\n        getFillColor: d => d.color,\r\n        getLineWidth: themes.poly_linewidth,\r\n        onHover: info =>\r\n          this.setState({\r\n            hoveredObject: info.object,\r\n            pointerX: info.x,\r\n            pointerY: info.y,\r\n            hoverType: \"polygon\"\r\n          })\r\n      }),\r\n      new ScatterplotLayer({\r\n        id: \"locations\",\r\n        data: locations,\r\n        pickable: true,\r\n        opacity: themes.location_size,\r\n        radiusScale: themes.location_size,\r\n        radiusScale: 15,\r\n        radiusMinPixels: 10,\r\n        radiusMaxPixels: 20,\r\n        getPosition: d => d.coordinates,\r\n        getFillColor: d => themes.location_color,\r\n        onHover: info =>\r\n          this.setState({\r\n            hoveredObject: info.object,\r\n            pointerX: info.x,\r\n            pointerY: info.y,\r\n            hoverType: \"point\"\r\n          })\r\n      }),\r\n      new TextLayer({\r\n        id: \"orwell-locations-text\",\r\n        data: locations,\r\n        getPosition: d => d.coordinates,\r\n        getText: d => d.LOCATION_NAME,\r\n        getTextAnchor: \"middle\",\r\n        getAlignmentBaseline: \"center\",\r\n        getSize: 20,\r\n        getColor: [255, 255, 255]\r\n      })\r\n    ];\r\n    return (\r\n      <div className=\"Map\">\r\n        {/* Mr. Clayton, your comment is over there. */}\r\n        <DeckGL\r\n          initialViewState={initialViewState}\r\n          controller={true}\r\n          layers={layers}\r\n        >\r\n          <StaticMap\r\n            mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n            mapStyle=\"mapbox://styles/mapbox/dark-v10\"\r\n          />\r\n          {this._renderTooltip()}\r\n        </DeckGL>\r\n        <div\r\n          className=\"controlPanel\"\r\n          style={{\r\n            width: 200,\r\n            height: 150,\r\n            alignContent: \"left\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            fontFamily: \"serif\",\r\n            fontSize: 13\r\n          }}\r\n        >\r\n          <div\r\n            className=\"macias\"\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              marginLeft: -55,\r\n              marginTop: -15\r\n            }}\r\n          >\r\n            <div className=\"maciasText\">\r\n              <pre>Proleville</pre>\r\n            </div>\r\n            <div\r\n              className=\"maciasLegend\"\r\n            >\r\n              <div\r\n                className=\"line blue\"\r\n              >\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"villa\"\r\n            style={{ display: \"flex\", flexDirection: \"row\", marginLeft: -55 }}\r\n          >\r\n            <div className=\"villaText\">\r\n              <pre>Outer Party</pre>\r\n            </div>\r\n            <div\r\n              className=\"villaLegend\"\r\n            >\r\n              <div\r\n                className=\"line green\"\r\n              >\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"obregon\"\r\n            style={{ display: \"flex\", flexDirection: \"row\", marginLeft: -55 }}\r\n          >\r\n            <div className=\"obregonText\">\r\n              <pre>Inner Party</pre>\r\n            </div>\r\n            <div\r\n              className=\"obregonLegend\"\r\n            >\r\n              <div\r\n                className=\"line black\"\r\n              >\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter, HashRouter, Route } from \"react-router-dom\";\r\nimport Map from \"./Components/Map\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename=\"/\">\r\n        <div className=\"App\">\r\n          <Route exact path=\"/\" component={Map} />\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}